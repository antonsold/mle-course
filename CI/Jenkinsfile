pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS=credentials('mle-course')
        LC_ALL = "en_US.UTF-8"
        LANG    = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
    }

options {
        timestamps()
        skipDefaultCheckout(true)
	}
    stages {
        stage('Clone github repository') {
            steps {
                cleanWs()
                bat encoding: 'UTF-8', script: 'git clone -b main https://github.com/antonsold/mle-course'
				}
			}

        stage('Checkout repo dir') {
            steps {
                bat encoding: 'UTF-8', script: 'cd mle-course && dir'
				}
			}
			
		stage('Fetch data') {
            steps {
				bat encoding: 'UTF-8', script: 'cd mle-course && dvc pull'
				}
			}

//         stage('Login'){
//             steps{
//
//                 bat encoding: 'UTF-8', script: 'docker login -u %DOCKERHUB_CREDS_USR% -p %DOCKERHUB_CREDS_PSW%'
//                 }
//             }
//
//         stage('Create and run docker container') {
//             steps {
//                 script {
//                     try {
//                         bat encoding: 'UTF-8', script: 'cd mle-course && docker-compose build'
//                         }
//
//                     finally {
//                     bat encoding: 'UTF-8', script: '''
//                         cd mle-course
//                         docker-compose up -d
//                         '''
//                         }
// 				    }
//                 }
//             }
//
//         stage('Checkout container logs') {
//             steps {
//                 dir("mle-course") {
//                         bat encoding: 'UTF-8', script: '''
//                             docker-compose up -d
//                             for /f %%i in ('docker ps -qf "name=^mle-course-web-1"') do set containerId=%%i
//                             echo %containerId%
//                             IF "%containerId%" == "" (
//                                 echo "No container running"
//                             )
//                             ELSE (
//                                 docker logs --tail 1000 -f %containerId%
//                                 )
//                         '''
//                     }
//             }
//         }
//
//         stage('Checkout coverage report'){
//             steps{
//                 dir("mle-course"){
//                     bat encoding: 'UTF-8', script: '''
//                     docker-compose logs -t --tail 10
//                     '''
//                 }
//             }
//         }
//
//         stage('Push'){
//             steps{
//                 bat encoding: 'UTF-8', script: 'docker push asoldatenkov/mle-course:latest'
//             }
//         }
		stage ('Invoke CD pipeline') {
            steps {
                build job: 'mle-course-CD'
            }
        }
	}

    post {
        always {
            bat encoding: 'UTF-8', script: 'docker logout'
        }
    }
}
